--- a/include/bctoolbox/list.h
+++ b/include/bctoolbox/list.h
@@ -48,6 +48,7 @@
 BCTBX_PUBLIC bctbx_list_t * bctbx_list_concat(bctbx_list_t * first, bctbx_list_t * second);
 BCTBX_PUBLIC bctbx_list_t * bctbx_list_remove(bctbx_list_t * first, void *data);
 BCTBX_PUBLIC bctbx_list_t * bctbx_list_remove_custom(bctbx_list_t *first, bctbx_compare_func compare_func, const void *user_data);
+BCTBX_PUBLIC bctbx_list_t * bctbx_list_remove_link(bctbx_list_t * list, bctbx_list_t * elem);
 BCTBX_PUBLIC bctbx_list_t * bctbx_list_pop_front(bctbx_list_t *list, void **front_data);
 BCTBX_PUBLIC size_t bctbx_list_size(const bctbx_list_t * first);
 BCTBX_PUBLIC void bctbx_list_for_each(const bctbx_list_t * list, bctbx_list_iterate_func func);
--- a/src/containers/list.c
+++ b/src/containers/list.c
@@ -154,6 +154,22 @@
 	return first;
 }
 
+bctbx_list_t* bctbx_list_remove_link(bctbx_list_t* list, bctbx_list_t* elem){
+	bctbx_list_t* ret;
+	if (elem==list){
+		ret=elem->next;
+		elem->prev=NULL;
+		elem->next=NULL;
+		if (ret!=NULL) ret->prev=NULL;
+		return ret;
+	}
+	elem->prev->next=elem->next;
+	if (elem->next!=NULL) elem->next->prev=elem->prev;
+	elem->next=NULL;
+	elem->prev=NULL;
+	return list;
+}
+
 size_t bctbx_list_size(const bctbx_list_t* first){
 	size_t n=0;
 	while(first!=NULL){
